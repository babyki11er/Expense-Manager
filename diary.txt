x	completed
X 	failed or canceled
% 	completed but due date
!	more important task
l 	attention after all the tasks complete

2023-02-12 Sun 12:15 AM
	+30 mins
	Organized the files with a related directory. Used DOCUMENT_ROOT from SERVER as relative links are not reliable and weird
<2023-02-14 18:05:25>
[x]:	income stuffs. rows are not being inserted.
	Analysing the code, I learned that it's easier to think the flow in terms of an execution stack.
[%]:	add archive functions
[x]:	add deleting record

<2023-02-16>
[x]:	Archiving items, categories done.
[%]:	Need implementing edit feature.
		Want to organize the api end points as well!
[x]:	allow to create a category that already exist but archived

<20>
	done editing item, still needs work for 
	[x]:	update but does not affect the past records, basically adding a new item and archiving the old one
	[x]:	update functionality on category, record.
	[*]:	organized the code more
	[%]:	click listener on item suggestions
	Will focus on income, and calculating the stuffs after all this! very excited
	[X]:	want to show income history below the form
<21>
	[x]:	update record
	[X]:	show income in records.php
	[X]:	show incomes on incomes.php and records.php
<25>
	[ Refactoring ]
	[x]:	makeResource
	[x]:	pass the resource name as the second argument, and the array as the third
	[x]:	checkResource function

[ xxx ]:	renaming a category resulting in creating a new one
	[x]:	error with get-one.api, and insert.php not selecting on choosing the item
<26>
	[X]:	convert form to grid system (UI)
[ xxx ]:	add-api.php, creating a new item instance as you insert a new record
<27>

Note:
	learn to remove duplicate static codes that i have put for some reason, replace with more compact dynamic ones.
I believe code should be designed in a way it's easier to write, instead of focusing too much on reading.
you add extra complexity in making it more maintainable, and honestly, I still have no idea on standards, therefore, it's best to write it on my own way.
Change it later, but I need something that works first.

<March>
<1>

Note:
	learn about ?? operator, yeah, I am a dumb shit. I just don't feel like home yet.
[x]:	create function with db that checks if the inserted item already existed [ db_exist()]
			(app currently insert a new item if the selected values don't match the existing ones)
[x]:	display unique item names, my approach will be item#1 item#2, etc
		2023-03-03 00:51:27

<2>
[ fix ]:	qty and date not setting on update record
[X]:	select statement, don't insert order by, by default
[x]:	remove unused functions
[ ]:	take care of code using sql directly
Note:
	learn that foreach only have read access, copies the value instead of passing the reference
	learn about PHP doing type case fucking shit up, mistaking a string as an array, it works because the key was converted to int, which works as an index to the string, damn ..., me and PHP are like twins
<4>
[x]:	remember the order that is previously sorted, by using session variables, says we ordered the records using id, then update a record, when redirected to the records page, i want the records to be sorted by id that has been chosen previously, instead of date chosen by default
Note:
	learn that session_start stores the value on the server and send the cookies to the browser that would be like an index to look for the value, totally different from javascript sessionStorage
	associative array > switch > if/else

<5>
[ ]:	implement view part in MVC, view function, with data argument
[R]:	html function for every echoing the variable

<15>
[x]:	remove custom sql statement


[ future tasks ]
	[ ]:	replace ternary opearator and isset, with ??
	[x]:	item should not be inserted again in updating record.
	[ ]:	show function return type in suggestion
	[ ]:	show archived resources, to unarchive
	[ ]:	picture for the particular resource, will stand independent in its own table
	[x]:	want the update checkbox to be selected default, and stuffs i don't know how to describe
	[ ]:	show alerts after redirecting from api
	[x]:	convert javascript session script to PHP
	[ ]:	toggle ascending and descending order
[ item.php ]
	[x]:	default category has to be None
[ insert.php ]
	[x]:	item-id has to be 0 if the input value is new and has to be created first
	[ ]:	add tags as datalist to be searched quickly and label informal way
	[x]:	update a record
[ delete-api ]
	[ ]:	change to POST method for deleting instead of GET
	[ ]:	change all api that are not retrieving data to POST

	[x]:	implement the briefing in index page

[ UI ]
	[x]:	change the button color to blue for update, green for add, warnning for arhive, danger for delete
	[l]:	don't show the year for date in records.php
	[x]:	money should have , separaters like 3,000
insert.php
			Name | Qty
			Price | Category
			Date should be the first thing
			add remember item checkbox
records.php
			sort by item, cost, category
			filter by each of them
			make item clickable and redirect to update page

<Features>
[x]: Display record sort by date on default
[ ]: insert multiple items
[ ]: Add note on items, like warnning, and display that when adding that
[ ]: filter the records to use for calculating the analysis
[x]: Autosuggest item
[x]: Add balance
[half]: Brief analysis

<One Time Purchase>
[ ]: Insert One Time Purchase for buying in the future, set the stage as pending, add the deadline, and remind when the date reaches

<Outcome>
[ ]: Create type from each outcome and suggest it as they type
<Tags>
[ ]: Create tags, independent selecteds, autosuggest, freely usable

<Professional>
[ ]: Analyse the data using percetage by day, category, item. top 10 biggest outcomes, 10 most bought item
[ ]: Export data to JSON format and others
<Unknown Future>
[ ]:	globals.php, create table, insert certian values